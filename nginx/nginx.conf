# Define un "grupo" de servidores para nuestra aplicación.
# 'app' es el nombre del servicio de Flask en docker-compose.yml.
# '8000' es el puerto donde Gunicorn está escuchando.
upstream app_server {
    server app:8000;
}

server {
    # Nginx escuchará en el puerto 80 (HTTP estándar).
    listen 80;
    server_name localhost; # Puedes cambiar localhost por tu dominio si lo tienes.

    location / {
        # Pasa todas las peticiones al grupo de servidores que definimos arriba.
        proxy_pass http://app_server;

        # Estas cabeceras son importantes para que la aplicación Flask
        # reciba la información correcta sobre la petición original.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Esta sección le dice a Nginx que sirva los archivos estáticos directamente,
    # lo cual es mucho más eficiente que pasarlos por Flask.
    location /static {
        alias /app/static;
    }

    # ===== NUEVA CONFIGURACIÓN PARA MONITOREO PROTEGIDO =====
    # Verificación de autenticación para /monitor/
    location /monitor/ {
        auth_request /auth_verify;
        error_page 401 = @error401;

        # Proxy a cAdvisor - importante agregar trailing slash y headers
        proxy_pass http://cadvisor:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    
        # Manejar redirecciones de cAdvisor
        proxy_redirect http://cadvisor:8080/ /monitor/;
        proxy_redirect /containers/ /monitor/containers/;
    }

    location = /auth_verify {
        internal;
        proxy_pass http://app_server/auth_verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    location @error401 {
        return 302 /auth/login?next=$request_uri;
    }
}